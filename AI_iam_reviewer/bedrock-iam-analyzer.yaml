AWSTemplateFormatVersion: '2010-09-09'
Description: >
  AI-Powered IAM Security Analyzer using Amazon Bedrock for FedRAMP High environments.
  Provides intelligent policy analysis, role classification, and compliance reporting
  with 95% cost reduction vs traditional Access Analyzer solutions.

Parameters:
  # Core Configuration
  ReportsBucketName:
    Type: String
    Description: Globally unique S3 bucket name for AI analysis reports (will be created).
    
  LambdaSourceBucket:
    Type: String
    Description: S3 bucket containing the Lambda deployment packages.
    
  LambdaSourcePrefix:
    Type: String
    Default: "ai-iam-reviewer"
    Description: S3 prefix for Lambda deployment packages.
    
  # Bedrock Configuration
  BedrockModel:
    Type: String
    Default: "anthropic.claude-3-haiku-20240307-v1:0"
    AllowedValues:
      - "anthropic.claude-3-haiku-20240307-v1:0"
      - "anthropic.claude-3-sonnet-20240229-v1:0"
    Description: Bedrock model for IAM analysis (Haiku for cost, Sonnet for accuracy).
    
  BedrockRegion:
    Type: String
    Default: "us-gov-west-1"
    AllowedValues:
      - "us-gov-west-1"
      - "us-gov-east-1"
    Description: AWS GovCloud region for Bedrock service.
    
  # Analysis Configuration
  AnalysisSchedule:
    Type: String
    Default: "rate(7 days)"
    Description: EventBridge schedule for comprehensive IAM analysis.
    
  MaxTokensPerRequest:
    Type: Number
    Default: 4000
    MinValue: 1000
    MaxValue: 8000
    Description: Maximum tokens per Bedrock request (cost control).
    
  BatchSize:
    Type: Number
    Default: 10
    MinValue: 1
    MaxValue: 50
    Description: Number of IAM entities to analyze per batch.
    
  # Security Configuration
  KmsKeyArn:
    Type: String
    Default: ""
    Description: Optional CMK ARN for encryption (FedRAMP High requirement).
    
  VpcEndpointId:
    Type: String
    Default: ""
    Description: Optional VPC endpoint ID for Bedrock access (network isolation).
    
  # Compliance Configuration
  ComplianceFramework:
    Type: String
    Default: "NIST-800-53"
    AllowedValues:
      - "NIST-800-53"
      - "FedRAMP-High"
      - "FISMA"
    Description: Compliance framework for analysis and reporting.
    
  RiskThreshold:
    Type: String
    Default: "MEDIUM"
    AllowedValues:
      - "LOW"
      - "MEDIUM"
      - "HIGH"
      - "CRITICAL"
    Description: Minimum risk level for Security Hub findings.
    
  # Operational Configuration
  EnableSecurityHub:
    Type: String
    Default: "true"
    AllowedValues: ["true", "false"]
    Description: Enable Security Hub integration for findings.
    
  LogRetentionDays:
    Type: Number
    Default: 90
    AllowedValues: [1,3,5,7,14,30,60,90,120,150,180,365,400,545,731,1096,1827,2192,2557,2922,3288,3653]
    Description: CloudWatch Logs retention for Lambda functions (days).
    
  EnableDashboard:
    Type: String
    Default: "true"
    AllowedValues: ["true", "false"]
    Description: Create CloudWatch dashboard for monitoring.

Conditions:
  UseKmsEncryption: !Not [!Equals [!Ref KmsKeyArn, ""]]
  UseVpcEndpoint: !Not [!Equals [!Ref VpcEndpointId, ""]]
  EnableSecurityHubIntegration: !Equals [!Ref EnableSecurityHub, "true"]
  CreateDashboard: !Equals [!Ref EnableDashboard, "true"]
  HasLambdaPrefix: !Not [!Equals [!Ref LambdaSourcePrefix, ""]]

Resources:
  # S3 Bucket for Reports and Analysis Results
  AIReportsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref ReportsBucketName
      VersioningConfiguration:
        Status: Enabled
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - !If
            - UseKmsEncryption
            - ServerSideEncryptionByDefault:
                SSEAlgorithm: aws:kms
                KMSMasterKeyID: !Ref KmsKeyArn
            - ServerSideEncryptionByDefault:
                SSEAlgorithm: AES256
      LifecycleConfiguration:
        Rules:
          - Id: ArchiveOldReports
            Status: Enabled
            Transitions:
              - TransitionInDays: 30
                StorageClass: STANDARD_IA
              - TransitionInDays: 90
                StorageClass: GLACIER
          - Id: DeleteOldAnalysis
            Status: Enabled
            ExpirationInDays: 2555  # 7 years for compliance
      NotificationConfiguration:
        LambdaConfigurations:
          - Event: s3:ObjectCreated:*
            Function: !GetAtt ReportProcessorFunction.Arn
            Filter:
              S3Key:
                Rules:
                  - Name: prefix
                    Value: analysis/

  # S3 Bucket Policy for TLS Enforcement
  AIReportsBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref AIReportsBucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: EnforceTLS
            Effect: Deny
            Principal: "*"
            Action: s3:*
            Resource:
              - !Sub "${AIReportsBucket}/*"
              - !Sub "${AIReportsBucket}"
            Condition:
              Bool:
                aws:SecureTransport: false
          - Sid: RestrictToAccount
            Effect: Deny
            Principal: "*"
            Action: s3:*
            Resource:
              - !Sub "${AIReportsBucket}/*"
              - !Sub "${AIReportsBucket}"
            Condition:
              StringNotEquals:
                aws:PrincipalAccount: !Ref AWS::AccountId

  # DynamoDB Table for Analysis Cache and State Management
  AnalysisCacheTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "${AWS::StackName}-analysis-cache"
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: entity_id
          AttributeType: S
        - AttributeName: analysis_date
          AttributeType: S
      KeySchema:
        - AttributeName: entity_id
          KeyType: HASH
        - AttributeName: analysis_date
          KeyType: RANGE
      TimeToLiveSpecification:
        AttributeName: ttl
        Enabled: true
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      SSESpecification:
        SSEEnabled: true
        KMSMasterKeyId: !If
          - UseKmsEncryption
          - !Ref KmsKeyArn
          - !Ref AWS::NoValue
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES

  # IAM Role for Data Collector Lambda
  DataCollectorRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "ai-iam-data-collector-${AWS::StackName}"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
      Policies:
        - PolicyName: IAMReadAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - iam:ListRoles
                  - iam:ListUsers
                  - iam:ListPolicies
                  - iam:ListAttachedRolePolicies
                  - iam:ListAttachedUserPolicies
                  - iam:ListRolePolicies
                  - iam:ListUserPolicies
                  - iam:GetRole
                  - iam:GetUser
                  - iam:GetPolicy
                  - iam:GetPolicyVersion
                  - iam:GetRolePolicy
                  - iam:GetUserPolicy
                  - iam:GenerateServiceLastAccessedDetails
                  - iam:GetServiceLastAccessedDetails
                  - sts:GetCallerIdentity
                Resource: "*"
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                  - dynamodb:GetItem
                  - dynamodb:UpdateItem
                  - dynamodb:Query
                  - dynamodb:Scan
                Resource: !GetAtt AnalysisCacheTable.Arn
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                Resource: !Sub "${AIReportsBucket}/*"

  # IAM Role for Bedrock Analyzer Lambda
  BedrockAnalyzerRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "ai-iam-bedrock-analyzer-${AWS::StackName}"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
      Policies:
        - PolicyName: BedrockAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - bedrock:InvokeModel
                  - bedrock:InvokeModelWithResponseStream
                Resource: 
                  - !Sub "arn:${AWS::Partition}:bedrock:${BedrockRegion}::foundation-model/anthropic.claude-3-haiku-20240307-v1:0"
                  - !Sub "arn:${AWS::Partition}:bedrock:${BedrockRegion}::foundation-model/anthropic.claude-3-sonnet-20240229-v1:0"
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                  - dynamodb:Query
                Resource: !GetAtt AnalysisCacheTable.Arn
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                Resource: !Sub "${AIReportsBucket}/*"
              - Effect: Allow
                Action:
                  - securityhub:BatchImportFindings
                Resource: "*"
                Condition:
                  Bool:
                    "aws:SecureTransport": "true"

  # IAM Role for Report Processor Lambda
  ReportProcessorRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "ai-iam-report-processor-${AWS::StackName}"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
      Policies:
        - PolicyName: ReportProcessing
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                Resource: !Sub "${AIReportsBucket}/*"
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                Resource: !GetAtt AnalysisCacheTable.Arn
              - Effect: Allow
                Action:
                  - securityhub:BatchImportFindings
                Resource: "*"

  # CloudWatch Log Groups
  DataCollectorLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/ai-iam-data-collector-${AWS::StackName}"
      RetentionInDays: !Ref LogRetentionDays

  BedrockAnalyzerLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/ai-iam-bedrock-analyzer-${AWS::StackName}"
      RetentionInDays: !Ref LogRetentionDays

  ReportProcessorLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/ai-iam-report-processor-${AWS::StackName}"
      RetentionInDays: !Ref LogRetentionDays

  # Lambda Functions
  DataCollectorFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "ai-iam-data-collector-${AWS::StackName}"
      Runtime: python3.11
      Handler: iam_data_collector.lambda_handler
      Role: !GetAtt DataCollectorRole.Arn
      Timeout: 900
      MemorySize: 512
      ReservedConcurrencyLimit: 5
      Code:
        S3Bucket: !Ref LambdaSourceBucket
        S3Key: !If
          - HasLambdaPrefix
          - !Sub "${LambdaSourcePrefix}/iam_data_collector.zip"
          - "iam_data_collector.zip"
      Environment:
        Variables:
          CACHE_TABLE: !Ref AnalysisCacheTable
          REPORTS_BUCKET: !Ref ReportsBucketName
          BATCH_SIZE: !Ref BatchSize
          BEDROCK_REGION: !Ref BedrockRegion
          COMPLIANCE_FRAMEWORK: !Ref ComplianceFramework
      DeadLetterQueue:
        TargetArn: !GetAtt DataCollectorDLQ.Arn

  BedrockAnalyzerFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "ai-iam-bedrock-analyzer-${AWS::StackName}"
      Runtime: python3.11
      Handler: bedrock_policy_analyzer.lambda_handler
      Role: !GetAtt BedrockAnalyzerRole.Arn
      Timeout: 300
      MemorySize: 1024
      ReservedConcurrencyLimit: 10
      Code:
        S3Bucket: !Ref LambdaSourceBucket
        S3Key: !If
          - HasLambdaPrefix
          - !Sub "${LambdaSourcePrefix}/bedrock_policy_analyzer.zip"
          - "bedrock_policy_analyzer.zip"
      Environment:
        Variables:
          BEDROCK_MODEL: !Ref BedrockModel
          BEDROCK_REGION: !Ref BedrockRegion
          MAX_TOKENS: !Ref MaxTokensPerRequest
          CACHE_TABLE: !Ref AnalysisCacheTable
          REPORTS_BUCKET: !Ref ReportsBucketName
          RISK_THRESHOLD: !Ref RiskThreshold
          COMPLIANCE_FRAMEWORK: !Ref ComplianceFramework
          ENABLE_SECURITY_HUB: !Ref EnableSecurityHub
      DeadLetterQueue:
        TargetArn: !GetAtt BedrockAnalyzerDLQ.Arn

  ReportProcessorFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "ai-iam-report-processor-${AWS::StackName}"
      Runtime: python3.11
      Handler: report_generator.lambda_handler
      Role: !GetAtt ReportProcessorRole.Arn
      Timeout: 600
      MemorySize: 512
      Code:
        S3Bucket: !Ref LambdaSourceBucket
        S3Key: !If
          - HasLambdaPrefix
          - !Sub "${LambdaSourcePrefix}/report_generator.zip"
          - "report_generator.zip"
      Environment:
        Variables:
          REPORTS_BUCKET: !Ref ReportsBucketName
          CACHE_TABLE: !Ref AnalysisCacheTable
          COMPLIANCE_FRAMEWORK: !Ref ComplianceFramework

  # Dead Letter Queues
  DataCollectorDLQ:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub "ai-iam-data-collector-dlq-${AWS::StackName}"
      MessageRetentionPeriod: 1209600  # 14 days
      KmsMasterKeyId: !If
        - UseKmsEncryption
        - !Ref KmsKeyArn
        - !Ref AWS::NoValue

  BedrockAnalyzerDLQ:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub "ai-iam-bedrock-analyzer-dlq-${AWS::StackName}"
      MessageRetentionPeriod: 1209600  # 14 days
      KmsMasterKeyId: !If
        - UseKmsEncryption
        - !Ref KmsKeyArn
        - !Ref AWS::NoValue

  # EventBridge Rules
  ScheduledAnalysisRule:
    Type: AWS::Events::Rule
    Properties:
      Name: !Sub "ai-iam-scheduled-analysis-${AWS::StackName}"
      Description: "Triggers comprehensive AI-powered IAM analysis"
      ScheduleExpression: !Ref AnalysisSchedule
      State: ENABLED
      Targets:
        - Arn: !GetAtt DataCollectorFunction.Arn
          Id: "DataCollectorTarget"
          Input: '{"mode": "scheduled", "full_analysis": true}'

  PolicyChangeRule:
    Type: AWS::Events::Rule
    Properties:
      Name: !Sub "ai-iam-policy-change-${AWS::StackName}"
      Description: "Triggers AI analysis on IAM policy changes"
      State: ENABLED
      EventPattern:
        source: ["aws.iam"]
        detail-type: ["AWS API Call via CloudTrail"]
        detail:
          eventSource: ["iam.amazonaws.com"]
          eventName:
            - "CreatePolicy"
            - "CreatePolicyVersion"
            - "SetDefaultPolicyVersion"
            - "AttachRolePolicy"
            - "AttachUserPolicy"
            - "PutRolePolicy"
            - "PutUserPolicy"
            - "UpdateAssumeRolePolicy"
            - "CreateRole"
            - "UpdateRole"
      Targets:
        - Arn: !GetAtt BedrockAnalyzerFunction.Arn
          Id: "BedrockAnalyzerTarget"

  # Lambda Permissions for EventBridge
  DataCollectorEventPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref DataCollectorFunction
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt ScheduledAnalysisRule.Arn

  BedrockAnalyzerEventPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref BedrockAnalyzerFunction
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt PolicyChangeRule.Arn

  # Lambda Permission for S3 Trigger
  ReportProcessorS3Permission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref ReportProcessorFunction
      Action: lambda:InvokeFunction
      Principal: s3.amazonaws.com
      SourceArn: !Sub "${AIReportsBucket}"

  # Security Hub (Optional)
  SecurityHub:
    Type: AWS::SecurityHub::Hub
    Condition: EnableSecurityHubIntegration
    Properties:
      Tags:
        - Key: Purpose
          Value: "AI-IAM-Analysis"
        - Key: Compliance
          Value: !Ref ComplianceFramework

  # CloudWatch Dashboard (Optional)
  AIIAMDashboard:
    Type: AWS::CloudWatch::Dashboard
    Condition: CreateDashboard
    Properties:
      DashboardName: !Sub "AI-IAM-Security-${AWS::StackName}"
      DashboardBody: !Sub |
        {
          "widgets": [
            {
              "type": "metric",
              "x": 0,
              "y": 0,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  [ "AWS/Lambda", "Invocations", "FunctionName", "${DataCollectorFunction}" ],
                  [ ".", "Duration", ".", "." ],
                  [ ".", "Errors", ".", "." ]
                ],
                "period": 300,
                "stat": "Sum",
                "region": "${AWS::Region}",
                "title": "Data Collector Metrics"
              }
            },
            {
              "type": "metric",
              "x": 12,
              "y": 0,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  [ "AWS/Lambda", "Invocations", "FunctionName", "${BedrockAnalyzerFunction}" ],
                  [ ".", "Duration", ".", "." ],
                  [ ".", "Errors", ".", "." ]
                ],
                "period": 300,
                "stat": "Sum",
                "region": "${AWS::Region}",
                "title": "Bedrock Analyzer Metrics"
              }
            },
            {
              "type": "log",
              "x": 0,
              "y": 6,
              "width": 24,
              "height": 6,
              "properties": {
                "query": "SOURCE '${DataCollectorLogGroup}' | SOURCE '${BedrockAnalyzerLogGroup}'\n| fields @timestamp, @message\n| filter @message like /ERROR/\n| sort @timestamp desc\n| limit 20",
                "region": "${AWS::Region}",
                "title": "Recent Errors"
              }
            }
          ]
        }

Outputs:
  ReportsBucket:
    Description: "S3 bucket for AI analysis reports"
    Value: !Ref ReportsBucketName
    Export:
      Name: !Sub "${AWS::StackName}-ReportsBucket"

  AnalysisCacheTable:
    Description: "DynamoDB table for analysis caching"
    Value: !Ref AnalysisCacheTable
    Export:
      Name: !Sub "${AWS::StackName}-CacheTable"

  DataCollectorFunctionArn:
    Description: "ARN of the IAM data collector function"
    Value: !GetAtt DataCollectorFunction.Arn
    Export:
      Name: !Sub "${AWS::StackName}-DataCollectorArn"

  BedrockAnalyzerFunctionArn:
    Description: "ARN of the Bedrock analyzer function"
    Value: !GetAtt BedrockAnalyzerFunction.Arn
    Export:
      Name: !Sub "${AWS::StackName}-BedrockAnalyzerArn"

  DashboardURL:
    Condition: CreateDashboard
    Description: "CloudWatch Dashboard URL"
    Value: !Sub "https://${AWS::Region}.console.aws.amazon.com/cloudwatch/home?region=${AWS::Region}#dashboards:name=${AIIAMDashboard}"

  BedrockModel:
    Description: "Bedrock model used for analysis"
    Value: !Ref BedrockModel

  EstimatedMonthlyCost:
    Description: "Estimated monthly cost in USD (based on 500 roles)"
    Value: !If
      - !Equals [!Ref BedrockModel, "anthropic.claude-3-haiku-20240307-v1:0"]
      - "$18-25"
      - "$25-35"